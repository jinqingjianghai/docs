{
  "openapi": "3.1.0",
  "info": {
    "title": "Genbo API",
    "description": "",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "Chat"
    },
    {
      "name": "Image Generation Model"
    },
    {
      "name": "Video Model"
    }
  ],
  "paths": {
    "/v1/chat/completions": {
      "post": {
        "summary": "Chat Conversation (OpenAI Format)",
        "deprecated": false,
        "description": "Given a prompt, the model will return one or more predicted completions, and can also return the probability of alternative tokens at each position.\nCreates a completion for the provided prompt and parameters.",
        "tags": [
          "Chat"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "model": {
                    "type": "string",
                    "description": "Corresponding Model Name. ",
                    "enum": [
                      "Qwen2.5-7B-Instruct"
                    ]
                  },
                  "messages": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": {
                          "type": "string",
                          "description": "The role of the messages author. Choice between: system, user, or assistant.",
                          "enum": [
                            "user",
                            "assistant",
                            "system"
                          ]
                        },
                        "content": {
                          "type": "string",
                          "description": "The contents of the message."
                        }
                      }
                    },
                    "description": "The list of messages in the conversation so far."
                  },
                  "temperature": {
                    "type": "integer",
                    "description": "Sampling temperature to use, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or top_p but not both.",
                    "minimum": 0,
                    "maximum": 1
                  },
                  "n": {
                    "type": "integer",
                    "description": "Defaults to 1. How many chat completion choices to generate for each input message.",
                    "default": 1
                  },
                  "top_p": {
                    "type": "integer",
                    "description": "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or temperature but not both.",
                    "minimum": 0,
                    "maximum": 1
                  },
                  "stream": {
                    "type": "boolean",
                    "description": "Defaults to false. If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as server-sent events as they become available, with data: [DONE] message terminating the stream.",
                    "default": false
                  },
                  "stop": {
                    "type": "string",
                    "description": "Defaults to null. Up to 4 sequences where the API will stop generating further tokens."
                  },
                  "max_tokens": {
                    "type": "integer",
                    "description": "Defaults to inf. The maximum number of tokens to generate in the chat completion. The total length of input tokens and generated tokens is limited by the model's context length.",
                    "minimum": 1,
                    "maximum": 16384
                  },
                  "presence_penalty": {
                    "type": "number",
                    "description": "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics."
                  },
                  "frequency_penalty": {
                    "type": "number",
                    "description": "Defaults to 0. Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.",
                    "default": 0,
                    "minimum": -2,
                    "maximum": 2
                  },
                  "logit_bias": {
                    "type": "null",
                    "description": "Modify the likelihood of specified tokens appearing in the completion. Accepts a JSON object that maps tokens (specified by token ID as given by the tokenizer) to an associated bias value between -100 and 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood; values like -100 or 100 should result in a ban or exclusive selection of the relevant token."
                  },
                  "user": {
                    "type": "string",
                    "description": "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse."
                  },
                  "response_format": {
                    "type": "object",
                    "properties": {},
                    "description": "An object specifying the format that the model must output. Use { \"type\": \"json_object\" } to enable JSON mode, which ensures the model's message is valid JSON. Important: When using JSON mode, you must also instruct the model to produce JSON via system or user message. If you do not, the model may generate an endless stream of whitespace until generation hits the token limit, resulting in increased latency and a 'stuck' request. Also note that if finish_reason=\"length\", the message content may be cut off, indicating generation exceeded max_tokens or the conversation exceeded the maximum context length."
                  },
                  "seed": {
                    "type": "integer",
                    "description": "This feature is experimental. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same seed and parameters should return the same result. Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to monitor for backend changes."
                  },
                  "tools": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "A set of tools the model can call. Currently, only functions are supported as tools. Use this to provide a list of functions the model can generate JSON inputs for."
                  },
                  "tool_choice": {
                    "type": "object",
                    "properties": {},
                    "description": "Controls which function (if any) the model calls. none means the model will not call a function and will instead generate a message. auto means the model can decide to generate a message or call a function. Use {\"type\": \"function\", \"function\": {\"name\": \"my_function\"}} to force the model to call that function. If no functions exist, defaults to none. If functions exist, defaults to auto. Show possible types."
                  }
                },
                "required": [
                  "model",
                  "messages"
                ]
              },
              "example": {
                "model": "Qwen2.5-7B-Instruct",
                "messages": [
                  {
                    "role": "user",
                    "content": "What opportunities and challenges will the Chinese large model industry face in 2025?"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "object": {
                      "type": "string"
                    },
                    "created": {
                      "type": "integer"
                    },
                    "choices": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "index": {
                            "type": "integer"
                          },
                          "message": {
                            "type": "object",
                            "properties": {
                              "role": {
                                "type": "string"
                              },
                              "content": {
                                "type": "string"
                              }
                            },
                            "required": [
                              "role",
                              "content"
                            ]
                          },
                          "finish_reason": {
                            "type": "string"
                          }
                        }
                      }
                    },
                    "usage": {
                      "type": "object",
                      "properties": {
                        "prompt_tokens": {
                          "type": "integer"
                        },
                        "completion_tokens": {
                          "type": "integer"
                        },
                        "total_tokens": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "prompt_tokens",
                        "completion_tokens",
                        "total_tokens"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "object",
                    "created",
                    "choices",
                    "usage"
                  ]
                },
                "example": {
                  "id": "<string>",
                  "object": "chat.completion",
                  "created": 1752470588,
                  "model": "Qwen2.5-7B-Instruct",
                  "choices": [
                    {
                      "index": 0,
                      "message": {
                        "role": "assistant",
                        "reasoning_content": null,
                        "content": "<string>",
                        "tool_calls": []
                      },
                      "logprobs": null,
                      "finish_reason": "stop",
                      "stop_reason": null
                    }
                  ],
                  "usage": {
                    "prompt_tokens": 47,
                    "total_tokens": 592,
                    "completion_tokens": 545,
                    "prompt_tokens_details": null
                  },
                  "prompt_logprobs": null
                }
              }
            },
            "headers": {}
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/v1/images/generations": {
      "post": {
        "summary": "Submit Image Task",
        "deprecated": false,
        "description": "",
        "tags": [
          "Image Generation Model"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "type": "object",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "Model",
                        "enum": [
                          "FLUX.1 [dev]",
                          "SD3",
                          "Hunyuan-DiT v1.2",
                          "FLUX.1 - Authentic Sketch",
                          "FLUX.1 - Shamanic Infusion",
                          "FLUX.1 - Vivid Dreamscape",
                          "FLUX.1 - Vintage Tropical Home"
                        ]
                      },
                      "prompt": {
                        "type": "string",
                        "description": "Prompt"
                      },
                      "seed": {
                        "type": "integer",
                        "description": "Default Random [0, 2147483647]",
                        "maximum": 2147483647,
                        "minimum": 0
                      },
                      "size": {
                        "type": "string",
                        "description": "Output Image Resolution. Default value is 1024*1024. The pixel range of image width and height sides is: [512, 1440]",
                        "default": "1024*1024"
                      },
                      "n": {
                        "type": "integer",
                        "description": "Number. Default 1",
                        "default": 1
                      }
                    },
                    "required": [
                      "model",
                      "prompt"
                    ],
                    "title": "Text to Image",
                    "description": "Text to Image"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "Model",
                        "enum": [
                          "flux.1-kontext-dev"
                        ]
                      },
                      "prompt": {
                        "type": "string",
                        "description": "Prompt"
                      },
                      "img_url": {
                        "type": "string",
                        "description": "Image URL"
                      }
                    },
                    "required": [
                      "model",
                      "prompt",
                      "img_url"
                    ],
                    "title": "Image to Image",
                    "description": "Image to Image"
                  }
                ]
              },
              "example": {
                "model": "FLUX.1 [dev]",
                "prompt": "a cat holding a skateboard which has 'Genbo' written on it in red spray paint",
                "seed": 1147483647,
                "size": "1024*1024",
                "n": 1
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "task_id"
                  ]
                },
                "example": {
                  "task_id": "<string>"
                }
              }
            },
            "headers": {}
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      },
      "get": {
        "summary": "Get Image Generation Result (List)",
        "deprecated": false,
        "description": "",
        "tags": [
          "Image Generation Model"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "required": true,
            "example": 10,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageNum",
            "in": "query",
            "description": "Page Number",
            "required": true,
            "example": 1,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "task_id": {
                        "type": "string"
                      },
                      "task_status": {
                        "type": "string",
                        "title": "Task Status"
                      },
                      "fail_reason": {
                        "type": "string",
                        "title": "Failure Reason"
                      },
                      "task_result": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "url": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            },
                            "title": "Generated Image URL"
                          }
                        },
                        "required": [
                          "url"
                        ]
                      },
                      "created_at": {
                        "type": "integer",
                        "title": "Task Creation Time (s)"
                      },
                      "updated_at": {
                        "type": "integer",
                        "title": "Task Update Time (s)"
                      }
                    },
                    "required": [
                      "task_id",
                      "task_status",
                      "fail_reason",
                      "task_result",
                      "created_at",
                      "updated_at"
                    ]
                  }
                },
                "example": {
                  "task_id": "<string>",
                  "task_status": "SUCCESS",
                  "fail_reason": "",
                  "task_result": {
                    "url": [
                      "<string>"
                    ]
                  },
                  "created_at": 1745369939,
                  "updated_at": 1745370059
                }
              }
            },
            "headers": {}
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/v1/images/generations/{id}": {
      "get": {
        "summary": "Get Image Generation Result (Single)",
        "deprecated": false,
        "description": "",
        "tags": [
          "Image Generation Model"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "example": "77808f7d-6d8c-4b2b-a63f-f46789204d0c",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task_id": {
                      "type": "string"
                    },
                    "task_status": {
                      "type": "string",
                      "title": "Task Status"
                    },
                    "fail_reason": {
                      "type": "string",
                      "title": "Failure Reason"
                    },
                    "task_result": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "url": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "title": "Generated Image URL"
                        }
                      },
                      "required": [
                        "url"
                      ]
                    },
                    "created_at": {
                      "type": "integer",
                      "title": "Task Creation Time (s)"
                    },
                    "updated_at": {
                      "type": "integer",
                      "title": "Task Update Time (s)"
                    }
                  },
                  "required": [
                    "task_id",
                    "task_status",
                    "fail_reason",
                    "task_result",
                    "created_at",
                    "updated_at"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Success Example",
                    "value": {
                      "task_id": "<string>",
                      "task_status": "SUCCESS",
                      "fail_reason": "",
                      "task_result": {
                        "url": [
                          "<string>"
                        ]
                      },
                      "created_at": 1744596109,
                      "updated_at": 1744596142
                    }
                  },
                  "2": {
                    "summary": "Task Not Started",
                    "value": {
                      "task_id": "<string>",
                      "task_status": "NOT_START",
                      "fail_reason": "",
                      "task_result": null,
                      "created_at": 1744356776,
                      "updated_at": 1744356776
                    }
                  },
                  "3": {
                    "summary": "Task Failure",
                    "value": {
                      "task_id": "<string>",
                      "task_status": "FAILURE",
                      "fail_reason": "<string>",
                      "task_result": null,
                      "created_at": 1744767040,
                      "updated_at": 1744767982
                    }
                  },
                  "4": {
                    "summary": "Exception Example",
                    "value": {
                      "error": {
                        "message": "User has not submitted this task",
                        "type": "task_not_exist"
                      }
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/v1/video/generations": {
      "post": {
        "summary": "Submit Video Task",
        "deprecated": false,
        "description": "",
        "tags": [
          "Video Model"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "title": "Text to Video",
                    "description": "Text to Video",
                    "type": "object",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "Model",
                        "enum": [
                          "Wan2_1-T2V-14B"
                        ]
                      },
                      "prompt": {
                        "type": "string",
                        "description": "Prompt"
                      },
                      "size": {
                        "type": "string",
                        "description": "Text-to-video resolution options: 1280*720 (default), 720*1280, 960*960, 832*1088, 1088*832",
                        "enum": [
                          "1280*720",
                          "720*1280",
                          "960*960",
                          "832*1088",
                          "1088*832"
                        ],
                        "default": "1280*720"
                      },
                      "duration": {
                        "type": "string",
                        "description": "Currently only supports 5 seconds",
                        "default": "5",
                        "enum": [
                          "5"
                        ]
                      }
                    },
                    "required": [
                      "model",
                      "prompt"
                    ]
                  },
                  {
                    "title": "Image to Video",
                    "description": "Image to Video",
                    "type": "object",
                    "properties": {
                      "model": {
                        "type": "string",
                        "description": "Model",
                        "enum": [
                          "Wan2_1-I2V-14B-720P"
                        ]
                      },
                      "prompt": {
                        "type": "string",
                        "description": "Prompt"
                      },
                      "img_url": {
                        "type": "string",
                        "description": "Image for Video"
                      },
                      "resolution": {
                        "type": "string",
                        "description": "Video Resolution Currently Only Supports 720P",
                        "enum": [
                          "720P"
                        ],
                        "default": "720P"
                      },
                      "duration": {
                        "type": "string",
                        "description": "Currently Only Supports 5 Seconds",
                        "enum": [
                          "5"
                        ],
                        "default": "5"
                      }
                    },
                    "required": [
                      "model",
                      "prompt",
                      "img_url"
                    ]
                  }
                ]
              },
              "example": {
                "model": "Wan2_1-T2V-14B",
                "size": "1280*720",
                "prompt": "A luxury yatch sets sail in the Bosphorus Strait. As it gracefully navigates through the current, the Maiden's Tower comes into view. While continuing its journey, seagulls greet it. The sounds of waves and seagulls can be heard."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task_id": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "task_id"
                  ]
                },
                "example": {
                  "task_id": "<string>"
                }
              }
            },
            "headers": {}
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/v1/videos/generations/{id}": {
      "get": {
        "summary": "Get Video Generation Result (Single)",
        "deprecated": false,
        "description": "",
        "tags": [
          "Video Model"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Task ID",
            "required": true,
            "example": "2189c7a5-18f2-443c-a6eb-5c8be012e15b",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "task_id": {
                      "type": "string"
                    },
                    "task_status": {
                      "type": "string",
                      "title": "Task Status"
                    },
                    "fail_reason": {
                      "type": "string",
                      "title": "Failure Reason"
                    },
                    "task_result": {
                      "type": [
                        "object",
                        "null"
                      ],
                      "properties": {
                        "url": {
                          "type": "string",
                          "title": "Video URL"
                        }
                      },
                      "required": [
                        "url"
                      ]
                    },
                    "created_at": {
                      "type": "integer",
                      "title": "Task Creation Time (s)"
                    },
                    "updated_at": {
                      "type": "integer",
                      "title": "Task Update Time (s)"
                    }
                  },
                  "required": [
                    "task_id",
                    "task_status",
                    "fail_reason",
                    "task_result",
                    "created_at",
                    "updated_at"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Success Example",
                    "value": {
                      "task_id": "<string>",
                      "task_status": "SUCCESS",
                      "fail_reason": "",
                      "task_result": {
                        "url": "<string>"
                      },
                      "created_at": 1745289303,
                      "updated_at": 1745289549
                    }
                  },
                  "2": {
                    "summary": "Task Not Started",
                    "value": {
                      "task_id": "<string>",
                      "task_status": "NOT_START",
                      "fail_reason": "",
                      "task_result": null,
                      "created_at": 1744356776,
                      "updated_at": 1744356776
                    }
                  },
                  "3": {
                    "summary": "Task Failure",
                    "value": {
                      "task_id": "<string>",
                      "task_status": "FAILURE",
                      "fail_reason": "<string>",
                      "task_result": null,
                      "created_at": 1744767040,
                      "updated_at": 1744767982
                    }
                  },
                  "4": {
                    "summary": "Exception Example",
                    "value": {
                      "error": {
                        "message": "User has not submitted this task",
                        "type": "task_not_exist"
                      }
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    },
    "/v1/videos/generations": {
      "get": {
        "summary": "Get Video Generation Result (List)",
        "deprecated": false,
        "description": "",
        "tags": [
          "Video Model"
        ],
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "",
            "required": true,
            "example": 10,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageNum",
            "in": "query",
            "description": "Page Number",
            "required": true,
            "example": 1,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "task_id": {
                        "type": "string"
                      },
                      "task_status": {
                        "type": "string",
                        "title": "Task Status"
                      },
                      "fail_reason": {
                        "type": "string",
                        "title": "Failure Reason"
                      },
                      "task_result": {
                        "type": [
                          "object",
                          "null"
                        ],
                        "properties": {
                          "url": {
                            "type": "string",
                            "title": "Video URL"
                          }
                        },
                        "required": [
                          "url"
                        ]
                      },
                      "created_at": {
                        "type": "integer",
                        "title": "Task Creation Time (s)"
                      },
                      "updated_at": {
                        "type": "integer",
                        "title": "Task Update Time (s)"
                      }
                    },
                    "required": [
                      "task_id",
                      "task_status",
                      "fail_reason",
                      "task_result",
                      "created_at",
                      "updated_at"
                    ]
                  }
                },
                "example": {
                  "task_id": "<string>",
                  "task_status": "SUCCESS",
                  "fail_reason": "",
                  "task_result": {
                    "url": "<string>"
                  },
                  "created_at": 1745287222,
                  "updated_at": 1745287455
                }
              }
            },
            "headers": {}
          }
        },
        "security": [
          {
            "Authorization": []
          }
        ]
      }
    }
  },
  "webhooks": {},
  "components": {
    "schemas": {
      "Pet": {
        "required": [
          "name",
          "photoUrls",
          "id",
          "category",
          "tags",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "Pet ID"
          },
          "category": {
            "$ref": "#/components/schemas/Category",
            "description": "group"
          },
          "name": {
            "type": "string",
            "description": "name",
            "examples": [
              "doggie"
            ]
          },
          "photoUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "image URL"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            },
            "description": "tag"
          },
          "status": {
            "type": "string",
            "description": "Pet Sales Status",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "Category ID"
          },
          "name": {
            "type": "string",
            "description": "Category Name"
          }
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "minimum": 1,
            "description": "Tag ID"
          },
          "name": {
            "type": "string",
            "description": "Tag Name"
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "scheme": "bearer",
        "type": "http",
        "description": "Use the following format for authentication: Bearer [<your api key>](https://genbo.ai/apiTokens)"
      }
    }
  },
  "servers": [
    {
      "url": "https://api.genbo.ai",
      "description": "Prod Env"
    }
  ],
  "security": [
    {
      "Authorization": []
    }
  ]
}